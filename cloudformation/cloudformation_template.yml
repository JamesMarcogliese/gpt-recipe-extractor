AWSTemplateFormatVersion: 2010-09-09
Description: >-
  CloudFormation template for setting up an AWS architecture to upload recipe
  images to an S3 bucket, process them with Lambda, upload the resulting
  markdown to another S3 bucket, then send them up to Confluence.
Parameters:
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing the Lambda code
    Default: my-lambda-code-bucket
Resources:
  ImageUploadUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub image-upload-user-${AWS::AccountId}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 86559adf-3ec5-4c87-a7f6-1f0227faeff4
  AccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref ImageUploadUser
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 16e3d627-40a5-4ffd-9e0a-8ea5031d3a2b
    DependsOn:
      - ImageUploadUser
  UserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: UploadToS3BucketPolicy
      Users:
        - !Ref ImageUploadUser
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource:
              - !Sub 'arn:aws:s3:::input-recipe-image-bucket-${AWS::AccountId}/*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d09e1beb-a7c1-40ad-bfc2-df6f0115e344
    DependsOn:
      - ImageUploadUser
  InputRecipeImageBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'input-recipe-image-bucket-${AWS::AccountId}'
      NotificationConfiguration:
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue: !GetAtt ImageNotificationQueue.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fbf89cd9-8c5e-40d1-8520-6e44adce455d
    DependsOn:
      - ImageNotificationQueue
  ImageNotificationQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub image-notification-queue-${AWS::AccountId}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 32bbe24a-4fc7-4d9c-b034-867154898de5
  ImageNotificationQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      Queues:
        - !Ref ImageNotificationQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 's3.amazonaws.com'
            Action: 'sqs:SendMessage'
            Resource: !GetAtt ImageNotificationQueue.Arn
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:s3:::input-recipe-image-bucket-*'
  Img2MdLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'gpt_lambda_package.zip'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt GptRecipeExecutionRole.Arn
      Runtime: 'python3.7'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 492fefc7-acd9-46d2-920d-799cefe40600
    DependsOn:
      - GptRecipeExecutionRole
      - ImageNotificationQueue
      - RecipeMarkdownBucket
  Img2MdLambdaEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !GetAtt ImageNotificationQueue.Arn
      FunctionName: !GetAtt Img2MdLambda.Arn
      Enabled: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 647a4dca-72d8-42ab-a8b2-9769cf225cf4
    DependsOn:
      - ImageNotificationQueue
      - Img2MdLambda
  RecipeMarkdownBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'recipe-markdown-bucket-${AWS::AccountId}'
      NotificationConfiguration:
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue: !GetAtt MarkdownNotificationQueue.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cdb4a173-216a-4c53-8935-2bf2e3d4156e
    DependsOn:
      - MarkdownNotificationQueue
  ConfluenceUploaderLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: 'confluence_lambda_package.zip'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt GptRecipeExecutionRole.Arn
      Runtime: 'python3.7'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5dd7bd57-3ed7-42ef-a4cd-516a10388290
    DependsOn:
      - GptRecipeExecutionRole
      - MarkdownNotificationQueue
      - RecipeMarkdownBucket
  ConfluenceUploaderLambdaEventSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !GetAtt MarkdownNotificationQueue.Arn
      FunctionName: !GetAtt ConfluenceUploaderLambda.Arn
      Enabled: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f6dcf811-19bd-41ae-a99a-8791c7bdeefe
    DependsOn:
      - MarkdownNotificationQueue
      - ConfluenceUploaderLambda
  MarkdownNotificationQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub markdown-notification-queue-${AWS::AccountId}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2c1e5d17-bca0-4d48-ba7e-e1828526514a
  MarkdownNotificationQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      Queues:
        - !Ref MarkdownNotificationQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 's3.amazonaws.com'
            Action: 'sqs:SendMessage'
            Resource: !GetAtt MarkdownNotificationQueue.Arn
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:s3:::recipe-markdown-bucket-*'
  GptRecipeExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::my-lambda-code-bucket/*'
        - PolicyName: LambdaSQSandS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                Resource:
                  - 'arn:aws:s3:::input-recipe-image-bucket-*/*'
                  - 'arn:aws:s3:::recipe-markdown-bucket-*/*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e1ae5ef5-aabb-46f2-94a6-1a4cab82bc02